{    
   "apiVersion"      : "1.0.0",
   "swaggerVersion"  : "1.2",
   "basePath"        : "/api/v1",
   "resourcePath"    : "/types",
   "produces": [
      "application/json"
   ],
   "apis": [
      { 
         "path": "/types",
         "operations": [
            {
               "method"     : "POST",
               "summary"    : "Creates a type.",
               "notes"      : "<h3>Creates a type on the platform</h3>Creates a Type on the platform. A type defines how an object is structured. A type has a number of required fields including @reference and @context. The @context contains an array of member descriptions that an object requires so that it is compliant with the Type. Before an Object is created on the system it is validated against the context as outlined in its Type. <br/><br/>The Types allow for members of the following primitive types to be defined in the Objects.<br><br><ul><li>boolean</li><li>int</li><li>float</li><li>string</li><li>hexadecimal</li><li>base64</li><li>date(DD-MM-YYYY)</li><li>timestamp(yyyy-MM-dd HH:mm:ss.SSS)</li><li>Type</li></ul>",
               "type"       : "CreateResponse",
               "nickname"   : "createType",
               "parameters" : [
                  {
                     "name"         : "data",
                     "description"  : "The type to be created.",
                     "required"     : true,
                     "type"         : "Type",
                     "paramType"    : "body"
                  }
               ],
               "responseMessages": [
                  {
                     "code": 400,
                     "message": "Bad Request",
                     "responseModel": "CreateErrorResponse"
                  },
                  {
                     "code": 401,
                     "message": "Not Authorised",
                     "responseModel": "CreateErrorResponse"
                  }
               ]
            },
            {
               "method"     : "PATCH",
               "summary"    : "Create multiple types in a single request.",
               "notes"      : "Create multiple types to a in one go.",
               "type": "array",
               "items": {
                  "$ref" : "CreateResponse"
               },
               "nickname"   : "createTypes",
               "parameters" : [
                  {
                     "name"         : "body",
                     "description"  : "JSON array of the types to be created.",
                     "required"     : true,
                     "type": "array",
                     "items": {
                        "$ref" : "Type"
                     },
                     "paramType"    : "body"
                  }
               ],
               "responseMessages": [
                  {
                     "code": 400,
                     "message": "Bad Request",
                     "responseModel": "CreateErrorResponse"
                  },
                  {
                     "code": 401,
                     "message": "Not Authorised",
                     "responseModel": "CreateErrorResponse"
                  }
               ]
            }
         ]
      },
      {
         "path": "/types",
         "operations": [
            {
               "method"     : "GET",
               "summary"    : "Retrieves the types on the system.",
               "notes"      : "Retrieves the types on the system.. ",
               "type"       : "TypeList",
               "nickname"   : "getTypes",
               "parameters" : [
                  {
                     "name"        : "offset",
                     "description" : "Pagination feature, the amount of objects to offset.",
                     "required"    : false,
                     "type"        : "int",
                     "paramType"   : "query"
                  },
                  {
                     "name"        : "limit",
                     "description" : "The amount of objects to return.",
                     "required"    : false,
                     "type"        : "int",
                     "paramType"   : "query"
                  },
                  {
                     "name"          : "id_only",
                     "description"   : "If true returns an array of object ids instead of the full objects.",
                     "required"      : false,
                     "type"          : "boolean",
                     "paramType"     : "query",
                     "allowMultiple" : false
                  },
                  {
                     "name"          : "content-type",
                     "description"   : "Supported content-type is application/json-ld.",
                     "required"      : false,
                     "type"          : "string",
                     "enum"          : ["application/json-ld"],
                     "paramType"     : "query",
                     "allowMultiple" : true
                  }
               ],
               "responseMessages": [
                  {
                     "code": 400,
                     "message": "Object not found",
                     "responseModel": "ObjectErrorResponse"
                  },
                  {
                     "code": 401,
                     "message": "Unauthorised request",
                     "responseModel": "ObjectErrorResponse"
                  }
               ]
            }]
      },
      {
         "path": "/types/{typeID}",
         "operations": [
            {
               "method"     : "GET",
               "summary"    : "Get a type.",
               "notes"      : "Returns the type associated with the provided Id.",
               "type"       : "Type",
               "nickname"   : "getType",
               "parameters" : [
                  {
                     "name"         : "typeID",
                     "description"  : "The Id of the type.",
                     "required"     : true,
                     "type"        : "string",
                     "paramType"    : "path"
                  },
                  {
                     "name"          : "content-type",
                     "description"   : "Supported content-type is application/json-ld.",
                     "required"      : false,
                     "type"          : "string",
                     "enum"          : ["application/json-ld"],
                     "paramType"     : "query",
                     "allowMultiple" : true
                  }
               ],
               "responseMessages": [
                  {
                     "code": 400,
                     "message": "Bad Request",
                     "responseModel": "CreateErrorResponse"
                  },
                  {
                     "code": 401,
                     "message": "Not Authorised",
                     "responseModel": "CreateErrorResponse"
                  }
               ]
            }
         ]
      },
      {
         "path": "/types/stats",
         "operations": [
            {
               "method"     : "GET",
               "summary"    : "Retrieves the Types usage stats.",
               "notes"      : "Retrieves the Types usage stats.",
               "type"        : "array",
               "items"       : {
                  "$ref" : "Stat"
               },
               "nickname"   : "getStats",
               "parameters" : [
               ],
               "responseMessages": [
                  {
                     "code": 400,
                     "message": "Object not found",
                     "responseModel": "ObjectErrorResponse"
                  },
                  {
                     "code": 401,
                     "message": "Unauthorised request",
                     "responseModel": "ObjectErrorResponse"
                  }
               ]
            }]
      }
   ],
   "models": {
      "Type": {
         "id": "Type",
         "properties": {
            "@id": {
               "type"        : "string",
               "description" : "Unique identifier for the type",
               "required"    : false
            },
            "@location": {
               "type"        : "string",
               "description" : "Unique types URI",
               "required"    : false
            },
            "@context": {
               "type"        : "array",
               "description" : "An array of Types",
               "items"       : {
                  "$ref" : "ContextEntry"
               }
            },
            "@reference": {
               "type"        : "string",
               "description" : "The URL of the refernce type.",
               "required"    : true
            },
            "_date_created": {
               "type"        : "Date",
               "description" : "Date that the Type was created.",
               "required"    : false
            }
         }
      },
      "TypeList" :{
         "id": "TypeList",
         "properties": {
            "meta" : {
               "type" : "Meta"
            },
            "result" : {
               "type"        : "array",
               "items"       : {
                  "$ref" : "Type"
               }
            }
         }
      },
      "Meta" : {
         "id" : "Meta",
         "properties" : {
            "limit": {
               "type"        : "int",
               "format"      : "int32",
               "description" : "limit",
               "required"    : true
            },
            "offset": {
               "type"        : "int",
               "format"      : "int32",
               "description" : "offset",
               "required"    : true
            },
            "total_count": {
               "type"        : "int",
               "format"      : "int32",
               "description" : "total_count",
               "required"    : true
            },
            "prev": {
               "type"        : "string",
               "description" : "prev",
               "required"    : true
            },
            "next": {
               "type"        : "string",
               "description" : "next",
               "required"    : true
            }
         }
      },
      "Stat": {
         "id": "Stat",
         "properties": {
            "key": {
               "type"        : "string",
               "description" : "The stat key",
               "required"    : true
            },
            "value": {
               "type"        : "int",
               "description" : "The stat value",
               "required"    : true
            }
         }
      },
      "CreateResponse": {
         "id": "CreateResponse",
         "properties": {
            "id": {
               "type"        : "string",
               "description" : "The id of the newly created Type",
               "required"    : true
            }
         }
      },
      "CreateErrorResponse": {
         "id": "CreateErrorResponse",
         "properties": {
            "error": {
               "type"        : "string",
               "description" : "Description of error that occurred.",
               "required"    : true
            }
         }
      },
      "ContextEntry": {
         "id": "ContextEntry",
         "properties": {
            "@property_name": {
               "type"        : "string",
               "description" : "Identifier for the context",
               "required"    : true
            },
            "@data_type": {
               "type"        : "string",
               "description" : "The type's basic type: one of boolean, int, string",
               "required"    : true
            },
            "@required": {
               "type"        : "boolean",
               "description" : "Is this property required or optional",
               "required"    : true
            },
            "@multiple": {
               "type"        : "boolean",
               "description" : "Is this entry a single value or an array with multiple values",
               "required"    : true
            },
            "@allowed_values": {
               "type"        : "array",
               "description" : "This property can only be set to the values listed in the allowed_values array.",
               "items"       : {
                  "$ref" : "string"
               },
               "required"    : false
            },
            "@context": {
               "type"        : "string",
               "description" : "A human readable description for the type (used in the auth dialogs).",
               "required"    : true
            }
         }
      }
   }
}
